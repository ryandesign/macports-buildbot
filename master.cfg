# -*- python -*-
# ex: set filetype=python:

import os
import re
import subprocess
import sys

from datetime import timedelta
from yaml import load
try:
    from yaml import CLoader as Loader
except ImportError:
    from yaml import Loader

from buildbot.plugins import (
    util, changes, steps, schedulers, worker, reporters)

from utilities import *


c = BuildmasterConfig = {}

c['configurators'] = [
    util.JanitorConfigurator(
        logHorizon=timedelta(weeks=4),
        hour=12,
        dayOfWeek=6)
]
c['caches'] = {
    'Changes': 1000,
    'Builds': 5000,
    'chdicts': 100,
    'BuildRequests': 10,
    'SourceStamps': 20,
    'ssdicts': 20,
    'objectids': 10,
    'usdicts': 100,
}

c['collapseRequests'] = False

config = {
    'configfile': get_path('config.yml'),
    'secretsfile': get_path('secrets.yml'),
    'usersfile': get_path('users.yml'),
    'workersfile': get_path('workers.yml'),
}

try:
    with open(config['configfile']) as f:
        extconfig = load(f, Loader=Loader)
except IOError:
    extconfig = {}
config.update(extconfig)

try:
    with open(config['secretsfile']) as f:
        secrets = load(f, Loader=Loader)
except IOError:
    secrets = {}

try:
    with open(config['usersfile']) as f:
        users = load(f, Loader=Loader)
except IOError:
    users = {}

path_base = '/usr/bin:/bin:/usr/sbin:/sbin'
path_ports = os.path.join(config['toolsprefix'], 'bin') + ':' + path_base

with open(config['workersfile']) as f:
    workerdata = load(f, Loader=Loader)

build_platforms = workerdata['build_platforms']

c['workers'] = [worker.Worker(name, pwd)
                for name, pwd in workerdata['workers'].items()]

c['protocols'] = {'pb': {'port': config['workerport']}}

c['change_source'] = [
    changes.GitPoller(
        config['portsurl'],
        workdir='gitpoller-workdir', branch='master',
        pollInterval=10,
        pollAtLaunch=True)
]

base_platforms = [
    plat for plat in build_platforms
    if 'legacy' not in plat and 'darwin_10_i386' not in plat]
port_platforms = [
    plat for plat in build_platforms
    if 'linux' not in plat and 'darwin_9_ppc' != plat]

base_buildernames = list(map('base_{}'.format, base_platforms))
portwatcher_buildernames = list(map('ports_{}_watcher'.format, port_platforms))
portbuilder_buildernames = list(map('ports_{}_builder'.format, port_platforms))
portbuilder_triggerables = list(map('ports_{}_trigger'.format, port_platforms))

c['schedulers'] = [
    schedulers.ForceScheduler(
        name='portwatcher_force',
        builderNames=portwatcher_buildernames,
        properties=[
            util.StringParameter(
                name='portlist',
                label='Port list:',
                default='',
                required=False),
            util.StringParameter(
                name='portexpression',
                label='Port expression:',
                default='',
                required=False)
        ]),
    schedulers.SingleBranchScheduler(
        name='ports',
        treeStableTimer=5,
        change_filter=util.ChangeFilter(
            branch='master',
            filter_fn=lambda change: any(port_from_path(f)
                                         for f in change.files)
        ),
        builderNames=portwatcher_buildernames)
]

portbuilders = zip(portbuilder_triggerables, portbuilder_buildernames)
c['schedulers'].extend(schedulers.Triggerable(name=t, builderNames=[b])
                       for t, b in portbuilders)


class TriggerWithPortlist(steps.Trigger):
    def __init__(self, *args, **kwargs):
        super(TriggerWithPortlist, self).__init__(*args, **kwargs)

    def getSchedulersAndProperties(self):
        sp = []
        priority = 1
        for scheduler in self.schedulerNames:
            for port in self.build.getProperty('portlist').split():
                props = self.set_properties.copy()
                props['virtual_builder_name'] = port + \
                    '_' + self.set_properties.get('platform')
                props['virtual_builder_tags'] = [
                    port, self.set_properties.get('platform')]
                props['portname'] = port
                props['priority'] = priority
                priority += 1
                sp.append([scheduler, props])
        return sp


class SetPropertyFromCommandWithPortlist(steps.SetPropertyFromCommand):
    def setBuild(self, build):
        super(SetPropertyFromCommandWithPortlist, self).setBuild(build)

        ports = set(self.getProperty('portlist', default='').split())
        ports.update(filter(None, map(port_from_path, self.build.allFiles())))

        self.setProperty('portlist', ' '.join(ports))


@util.renderer
def portCommand(props):
    command = ['port', 'info', '--index', '--line',
               '--name']
    pl = props.getProperty('portlist')
    pe = props.getProperty('portexpression')

    if pl != '' and pl != [''] and pl != None:
        pl = pl.split(' ')
        command.extend([pl])
    elif pe != '' and pe != [''] and pe != None:
        pe = pe.split(' ')
        command.extend([pe])
    return command


def make_portwatcher_factory(triggerable, os_version):
    portwatcher_factory = util.BuildFactory()
    portwatcher_factory.useProgress = False
    portwatcher_factory.workdir = 'build'

    portwatcher_factory.addStep(SetPropertyFromCommandWithPortlist(
        command=portCommand,
        property='portlist',
        description='settingportlist',
        descriptionDone='portlistset'
    ))

    portwatcher_factory.addStep(TriggerWithPortlist(
        name='portbuilders',
        schedulerNames=[triggerable],
        set_properties={'platform': os_version},
        waitForFinish=True,
        updateSourceStamp=True
    ))

    return portwatcher_factory


portbuilder_factory = util.BuildFactory()
portbuilder_factory.useProgress = False
portbuilder_factory.workdir = 'build'
logdir = os.path.join(portbuilder_factory.workdir, 'logs')

portbuilder_factory.addStep(steps.SetPropertyFromCommand(
    command=['port', 'info', '--version',
             '--line', util.Interpolate('%(prop:portname)s')],
    property='version'
))

portbuilder_factory.addStep(steps.FileDownload(
    mastersrc='./rands.py',
    workerdest='rands.py'
))

portbuilder_factory.addStep(steps.ShellCommand(
    command=['python', 'rands.py']
))

portsworkers = {}
baseworkers = {}
workernames = workerdata['workers'].keys()
for plat in build_platforms:
    baseworkers[plat] = filter(
        lambda x: x.endswith(plat + '_base'), workernames)
    portsworkers[plat] = filter(
        lambda x: x.endswith(plat + '_ports'), workernames)

env_buildinfo = {
    'BUILDBOT_BUILDERNAME': util.Interpolate('%(kw:buildername)s'),
    'BUILDBOT_BUILDNUMBER': util.Interpolate('%(kw:buildnumber)s')
}

c['builders'] = []
extract_darwin_version = re.compile(r'darwin_(\d+)')

for plat in build_platforms:
    darwin_match = extract_darwin_version.search(plat)
    if darwin_match:
        os_version = int(darwin_match.group(1))
        if os_version < 20:
            os_version = '10.%d' % (os_version - 4)
        else:
            os_version = str(os_version - 9)
    else:
        os_version = plat
    c['builders'].extend((
        util.BuilderConfig(
            name='ports_' + plat + '_watcher',
            workernames=['ports_' + plat],
            factory=make_portwatcher_factory(
                'ports_' + plat + '_trigger', os_version),
            tags=['portwatcher', os_version],
            env=merge_dicts(env_buildinfo, {'PATH': path_ports})),
        util.BuilderConfig(
            name='ports_' + plat + '_builder',
            workernames=['ports_' + plat],
            factory=portbuilder_factory,
            tags=['portbuilder', os_version],
            nextBuild=getNextBuildOnPortBuilder,
            env=merge_dicts(env_buildinfo, {'PATH': path_ports}))
    ))

if 'statusPushUrl' in config:
    sp = reporters.HttpStatusPush(serverUrl=config['statusPushUrl'])
    c['services'] = [sp]

c['title'] = config['title']
c['titleURL'] = config['titleURL']
c['buildbotURL'] = config['buildbotURL']

avatar = util.AvatarGravatar()
avatar.default = 'identicon'

c['www'] = dict(
    port=config['httpport'],
    auth=util.GitHubAuth(
        secrets['githubappclientid'],
        secrets['githubappclientsecret']),
    authz=util.Authz(
        allowRules=[
            util.AnyEndpointMatcher(role='admin'),
            util.AnyControlEndpointMatcher(role='admin')],
        roleMatchers=[
            util.RolesFromUsername(roles=['admin'], usernames=users)]),
    avatar_methods=[avatar],
    plugins=dict(
        waterfall_view={},
        console_view={},
        grid_view={},
        buildbot_macports_custom_views={}),
)

if sys.platform == 'darwin':
    proc = subprocess.run(['sw_vers', '-productVersion'], stdout=subprocess.PIPE)
    if proc.returncode == 0:
        c['www']['versions'] = [('macOS', proc.stdout.decode('utf-8').rstrip())]

c['www']['ui_default_config'] = {
    'BuildbotMacPortsCustomViews.changeLimit': 500,
}

c['db'] = {
    'db_url': config['db_url'],
}

# Send usage statistics to buildbot.net. This is the default, but
# specifying it silences a notice in the log.
c['buildbotNetUsageData'] = 'basic'
